import { generateText, generateVoice } from './googlegen.js';

export class Persona {
  constructor(name, voice, personality) {
    this.name = name; // Name as appears in podcast
    this.voice = voice; // Voice selected for Google TTS
    this.personality = personality; // Text description of personality for text generation
  }

  async generateResponse(previousMessage, previousName, promptsLeft, originalTopic) {
    let text = '', voice = '', prompt = '';

    switch (promptsLeft) {
      case -1: // First message
        prompt = 
        `Please generate a short response as though you're a podcast host named ${this.name}.
        Your personality is: 
        ${this.personality}
        You are the first to speak here as your podcast just started.
        Introduce yourself, your cohost ${previousName}, and the topic which is: 
        ${previousMessage}`;
        break;
      case 2: // Second to last message
        prompt = `Please generate a short response as though you're a podcast host named ${this.name}.
        You've just check the clock, and you're out of time, so you need to address what your cohost just said and get ready to sign off.
        Your cohost named ${previousName} just said: 
        ${previousMessage}
        Make sure to close off the conversation about today's topic:
        ${originalTopic}`;
        break;
      case 1: // Last message
        prompt = `Please generate a short response as though you're a podcast host named ${this.name}.
        You're out of time so put your last words in and sign off. For reference, your cohost ${previousName} just said: 
        ${previousMessage}`;
        break;
      default: // Normal messages filling podcast
        prompt = 
        `Please generate a short response as though you're a podcast host named ${this.name}.
        Your personality is: 
        ${this.personality}
        You are responding to your cohost named ${previousName} who just said: 
        ${previousMessage}
        The topic for today is:
        ${originalTopic}`;
        break;
    }

  try {
      const generatedText = await generateText(prompt);
      text = generatedText;
      const generatedVoice = await generateVoice(generatedText, this.voice);
      voice = generatedVoice;
    } catch (error) {
        console.error(`API error: ${error.message}`);

        // Re-throw API errors for main.js to prompt user
        if (
          error.message.includes("401") ||
          error.message.toLowerCase().includes("unauthorized") ||
          error.message.toLowerCase().includes("quota") ||
          error.message.toLowerCase().includes("api key")
        ) {
          throw new Error("FATAL_API_ERROR: " + error.message);
        }
    }

    // returns String generated by Gemini, and audio data in base64
    return [text, voice];
  }

}
